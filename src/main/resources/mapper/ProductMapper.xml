<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.coding404.myweb.product.ProductMapper">

    <insert id="productInsert" parameterType="ProductVO">
        INSERT INTO PRODUCT( PROD_ENDDATE
                           , PROD_CATEGORY
                           , USER_ID
                           , PROD_NAME
                           , PROD_PRICE
                           , PROD_COUNT
                           , PROD_DISCOUNT
                           , PROD_PURCHASE_YN
                           , PROD_CONTENT
                           , PROD_COMMENT)
        VALUES ( #{prodEnddate}
               , #{prodCategory}
               , #{userId}
               , #{prodName}
               , #{prodPrice}
               , #{prodCount}
               , #{prodDiscount}
               , #{prodPurchaseYn}
               , #{prodContent}
               , #{prodComment})
    </insert>

    <!-- 목록을 조회한다 -->
    <!-- 동적 쿼리 test 구문에는 vo의 getter나 map의 key값이 사용 가능함-->
    <select id="getList" resultType="ProductVO">
        <![CDATA[
        SELECT *
        FROM PRODUCT P
        LEFT JOIN (
            SELECT CONCAT(A1.group_ID, A1.CATEGORY_ID) AS CATEGORY_KEY, ##카테고리 키 (그룹 + 키 형태로 카테고리분류)
            CASE A1.category_parent_LV
            WHEN 0 THEN A1.category_detail_NM
            WHEN 1 THEN CONCAT(A2.category_detail_NM,' > ', A1.category_detail_NM)
            WHEN 2 THEN CONCAT(A3.category_detail_NM, ' > ', A2.category_detail_NM,' > ', A1.category_detail_NM)
            END as CATEGORY_NAV
            FROM PRODUCT_CATEGORY A1
            LEFT OUTER JOIN PRODUCT_CATEGORY A2
            ON A1.CATEGORY_PARENT_LV = A2.CATEGORY_LV AND A1.CATEGORY_DETAIL_PARENT_LV = A2.CATEGORY_DETAIL_LV AND A1.GROUP_ID = A2.GROUP_ID
            LEFT OUTER JOIN PRODUCT_CATEGORY A3
            ON A2.CATEGORY_PARENT_LV = A3.CATEGORY_LV AND A2.CATEGORY_DETAIL_PARENT_LV = A3.CATEGORY_DETAIL_LV
            ORDER BY CATEGORY_NAV ASC
        ) C
        ON P.PROD_CATEGORY = C.CATEGORY_KEY
        WHERE USER_ID = #{userId}
        ]]>
        /*input 태그는 값이 없으면 공백, 페이지 첫 진입할 때 null로 넘어갈 수 있어서*/
        <if test="cri.searchName != '' and cri.searchName != null">
            AND PROD_NAME LIKE CONCAT('%',#{cri.searchName},'%')
        </if>
        <if test="cri.searchContent != '' and cri.searchContent != null">
            AND PROD_CONTENT LIKE CONCAT('%',#{cri.searchContent},'%')
        </if>
        <if test="cri.startDate != '' and cri.startDate != null">
            <![CDATA[AND PROD_ENDDATE >= #{cri.startDate}]]>
        </if>
        <if test="cri.endDate != '' and cri.endDate != null">
            /*
            xml 이나 html 한해서는 꺽쇠가 태그를 열고 닫는 인자로 인식됨
            그래서 순수 문자열로 변환시켜줘야 하는데 그럴 때 쓰는 게 CDATA
            <![CDATA[여기 들어간 값은 순수한 문자열로 인식됨]]>
            */
            <![CDATA[AND PROD_ENDDATE <= #{cri.endDate}]]>
        </if>
        ORDER BY
        <if test="cri.searchPrice == 'asc'">
            PROD_PRICE ASC,
        </if>
        <if test="cri.searchPrice == 'desc'">
            PROD_PRICE DESC,
        </if>
        PROD_ID DESC
        LIMIT #{ cri.pageStart}, #{ cri.amount}
    </select>

    <select id="getTotal" resultType="int">
        SELECT COUNT(*) AS TOTAL
        FROM PRODUCT
        WHERE USER_ID = #{userId}
        <if test="cri.searchName != '' and cri.searchName != null">
            AND PROD_NAME LIKE CONCAT('%',#{cri.searchName},'%')
        </if>
        <if test="cri.searchContent != '' and cri.searchContent != null">
            AND PROD_CONTENT LIKE CONCAT('%',#{cri.searchContent},'%')
        </if>
        <if test="cri.startDate != '' and cri.startDate != null">
            <![CDATA[AND PROD_ENDDATE >= #{cri.startDate}]]>
        </if>
        <if test="cri.endDate != '' and cri.endDate != null">
            <![CDATA[AND PROD_ENDDATE <= #{cri.endDate}]]>
        </if>
    </select>

    <!--상세내역을 조회한다-->
    <select id="getDetail" resultType="ProductVO">
        SELECT *
        FROM PRODUCT P
        LEFT JOIN (
            SELECT CONCAT(A1.group_ID, A1.CATEGORY_ID) AS CATEGORY_KEY,
                CASE A1.category_parent_LV
                    WHEN 0 THEN A1.category_detail_NM
                    WHEN 1 THEN CONCAT(A2.category_detail_NM,' > ', A1.category_detail_NM)
                    WHEN 2 THEN CONCAT(A3.category_detail_NM, ' > ', A2.category_detail_NM,' > ', A1.category_detail_NM)
            END as CATEGORY_NAV
            FROM PRODUCT_CATEGORY A1
            LEFT OUTER JOIN PRODUCT_CATEGORY A2
            ON A1.CATEGORY_PARENT_LV = A2.CATEGORY_LV AND A1.CATEGORY_DETAIL_PARENT_LV = A2.CATEGORY_DETAIL_LV AND A1.GROUP_ID = A2.GROUP_ID
            LEFT OUTER JOIN PRODUCT_CATEGORY A3
            ON A2.CATEGORY_PARENT_LV = A3.CATEGORY_LV AND A2.CATEGORY_DETAIL_PARENT_LV = A3.CATEGORY_DETAIL_LV
            ORDER BY CATEGORY_NAV ASC
            ) C
        ON P.PROD_CATEGORY = C.CATEGORY_KEY
        WHERE PROD_ID = #{prodId}
    </select>


    <update id="productUpdate" parameterType="ProductVO">
        UPDATE PRODUCT
        SET PROD_ENDDATE     = #{prodEnddate}
          , PROD_NAME        = #{prodName}
          , PROD_PRICE       = #{prodPrice}
          , PROD_COUNT       = #{prodCount}
          , PROD_DISCOUNT    = #{prodDiscount}
          , PROD_PURCHASE_YN = #{prodPurchaseYn}
          , PROD_CONTENT     = #{prodContent}
          , PROD_COMMENT     = #{prodComment}
        WHERE PROD_ID = #{prodId}
    </update>

    <!--삭제 기능 -->
    <delete id="productDelete" parameterType="int">
        DELETE
        FROM PRODUCT
        WHERE PROD_ID = #{prodId}
    </delete>


    <!-- 카테고리 1단계 조회 -->
    <select id="getCategory" resultType="CategoryVO">
        SELECT *
        FROM PRODUCT_CATEGORY WHERE CATEGORY_LV = 1
    </select>

    <!-- 카테고리 2,3단계 조회 -->
    <!-- PARENT_LV = 상위 카테고리 LV -->
    <select id="getCategoryChild" resultType="CategoryVO">
        SELECT *
        FROM PRODUCT_CATEGORY
        WHERE GROUP_ID = #{groupId}
          AND CATEGORY_PARENT_LV = #{categoryLv}
          AND CATEGORY_DETAIL_PARENT_LV = #{categoryDetailLv}
    </select>

    <!--파일 insert (상품 등록과 함께 등록됨)-->
    <insert id="uploadFile" parameterType="ProductUploadVO">
        /*
        파일 insert 전에 product 테이블의 prod_id 값을 조회한 뒤 가지고 와서 fk로 저장시켜야 함
        selectKey 태그는 특정 테이블을 조회해서, 조회한 결과를 vo에 대신 담아줌
        insert 태그 안에 종속시킴, 결과값을 ProductUploadVO에 맵핑시킴

        order 속성은 sql문 실행 이전, 실행 이후를 결정하는 속성
        resultType 속성은 실행될 sql문의 반환 타입
        keyProperty 속성은 조회한 결과를 vo의 어느 컬럼에 저장할지 정하는 속성
        */
        <selectKey order="BEFORE" resultType="int" keyProperty="prodId">/*insert 넣기 전으로 조회해야 하므로 before*/
            SELECT MAX(PROD_ID) FROM PRODUCT WHERE USER_ID = #{userId}
        </selectKey>

        INSERT INTO PRODUCT_UPLOAD (
                                    FILE_NAME,
                                    FILE_PATH,
                                    UUID,
                                    PROD_ID,
                                    USER_ID
        )
        VALUES (
                #{fileName},
                #{filePath},
                #{uuid},
                #{prodId},
                #{userId}
               )
    </insert>
</mapper>
